# name: Deploy PySpark Lambda with Docker via SAM

# on:
#   push:
#     branches:
#       - main

# env:
#   STACK_NAME: tech-processor
#   IAM_ROLE: arn:aws:iam::286128020352:role/text-processor-role
#   AWS_REGION: us-east-1
#   ECR_REPO: 286128020352.dkr.ecr.us-east-1.amazonaws.com/pyspark-lambda
#   IMAGE_TAG: latest

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   build-deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v4

#     - name: Setup Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.9'

#     - name: Setup SAM CLI
#       uses: aws-actions/setup-sam@v2

#     - name: Configure AWS Credentials via OIDC
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         role-to-assume: ${{ env.IAM_ROLE }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       run: |
#         aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

#     - name: Build Docker Image
#       run: |
#         docker build -t $ECR_REPO:$IMAGE_TAG ./PySparkLambdaFunction

#     - name: Push Image to ECR
#       run: |
#         docker push $ECR_REPO:$IMAGE_TAG

#     - name: SAM Deploy with Image URI
#       run: |
#         sam deploy \
#         --stack-name $STACK_NAME \
#         --capabilities CAPABILITY_IAM \
#         --parameter-overrides ImageUri=$ECR_REPO:$IMAGE_TAG \
#         --image-repository $ECR_REPO \
#         --no-confirm-changeset \
#         --no-fail-on-empty-changeset

name: Deploy PySpark Lambda with Docker via SAM

on:
  push:
    branches:
      - main

env:
  STACK_NAME: tech-processor
  IAM_ROLE: arn:aws:iam::286128020352:role/text-processor-role
  AWS_REGION: us-east-1
  ECR_REPO: 286128020352.dkr.ecr.us-east-1.amazonaws.com/pyspark-lambda
  IMAGE_TAG: latest

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS Credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

    - name: Build Docker Image
      run: |
        docker build -t $ECR_REPO:$IMAGE_TAG ./PySparkLambdaFunction

    - name: Push Image to ECR
      run: |
        docker push $ECR_REPO:$IMAGE_TAG

    - name: SAM Deploy with Image URI
      run: |
        sam deploy \
        --stack-name $STACK_NAME \
        --capabilities CAPABILITY_IAM \
        --parameter-overrides ImageUri=$ECR_REPO:$IMAGE_TAG \
        --image-repository $ECR_REPO \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset \
        --force-upload

    - name: Delete old untagged images from ECR
      run: |
        LATEST_DIGEST=$(aws ecr describe-images \
          --repository-name pyspark-lambda \
          --image-ids imageTag=latest \
          --query 'imageDetails[0].imageDigest' \
          --output text)

        UNTAGGED_DIGESTS=$(aws ecr list-images \
          --repository-name pyspark-lambda \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[*].imageDigest' \
          --output text)

        for digest in $UNTAGGED_DIGESTS; do
          if [ "$digest" != "$LATEST_DIGEST" ]; then
            echo "Deleting untagged digest: $digest"
            aws ecr batch-delete-image \
              --repository-name pyspark-lambda \
              --image-ids imageDigest=$digest
          fi
        done
